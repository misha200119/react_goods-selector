{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","state","goodsWithBoolIsSelected","map","str","goodName","isSelected","getStringDescription","goods","length","slice","join","selectGood","name","setState","prevState","clone","e","index","findIndex","clearSelected","forEach","good","this","selected","filter","headerText","className","classNames","app__listItemSelected","type","onClick","invisible","React","Component","ReactDOM","render","document","getElementById"],"mappings":"qQAMMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAYWC,EAAb,4MACEC,MAAe,CACbC,wBAAyBH,EAAgBI,KACvC,SAAAC,GAAG,MAAK,CACNC,SAAUD,EACVE,WAAoB,QAARF,OALpB,EAUEG,qBAAuB,SAACC,GAStB,OARcA,EAAMC,OAAS,GAAK,aACrBD,EAAMC,OAAS,EACxB,CACAD,EAAME,MAAM,GAAI,GAAGC,KAAK,MACxBH,EAAME,OAAO,IACbC,KAAK,SACLH,EAAMG,KAAK,WAjBnB,EAsBEC,WAAa,SAACC,GACZ,EAAKC,UAAS,SAACC,GACb,IAAMC,EAAQD,EAAUb,wBAAwBC,KAAI,SAAAc,GAAC,sBAAUA,MACzDC,EAAQF,EAAMG,WAAU,SAAAF,GAAC,OAAIA,EAAEZ,WAAaQ,KAIlD,OAFAG,EAAME,GAAOZ,YAAcU,EAAME,GAAOZ,WAEhC,CACNJ,wBAAyBc,OA9BjC,EAmCEI,cAAgB,WACd,EAAKN,UAAS,SAACC,GACb,IAAMC,EAAQD,EAAUb,wBAAwBC,KAAI,SAAAc,GAAC,sBAAUA,MAM/D,OAJAD,EAAMK,SAAQ,SAAAC,GACZA,EAAKhB,YAAa,KAGZ,CACNJ,wBAAyBc,OA5CjC,4CAiDE,WAAU,IAAD,OAC0BR,EAAUe,KAAKtB,MAAxCC,wBAEFsB,EAAWhB,EAAMiB,QAAO,SAAAH,GAAI,OAAIA,EAAKhB,cAAYH,KAAI,SAAAc,GAAC,OAAIA,EAAEZ,YAC5DqB,EAAaH,KAAKhB,qBAAqBiB,GAE7C,OACE,sBAAKG,UAAU,MAAf,UACE,oBAAIA,UAAU,oBAAd,SACGD,IAEH,oBAAIC,UAAU,iBAAd,SACGnB,EAAML,KAAI,SAAAmB,GAAI,OACb,qBAEEK,UACEC,IACE,gBACA,CACEC,sBAAwBP,EAAKhB,aANrC,UAWGgB,EAAKjB,SACN,wBACEyB,KAAK,SACLC,QAAS,kBAAM,EAAKnB,WAAWU,EAAKjB,WAFtC,SAIGiB,EAAKhB,WAAa,SAAW,aAf3BgB,EAAKjB,eAoBhB,wBACEyB,KAAK,SACLH,UACEC,IACE,CACEI,WAAYR,EAASf,SAI3BsB,QAASR,KAAKH,cAThB,0BAnFR,GAAyBa,IAAMC,WCzB/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9699bb5b.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\n/* eslint-disable prefer-template */\nimport React from 'react';\nimport classNames from 'classnames';\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype GoodsWithBoolIsSelected = {\n  goodName: string;\n  isSelected: boolean;\n};\n\ninterface State {\n  goodsWithBoolIsSelected: Array<GoodsWithBoolIsSelected>\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    goodsWithBoolIsSelected: goodsFromServer.map(\n      str => ({\n        goodName: str,\n        isSelected: str === 'Jam',\n      }),\n    ),\n  };\n\n  getStringDescription = (goods: Array<string>): string => {\n    const start = goods.length ? '' : 'No goods';\n    const end = (goods.length > 2)\n      ? [\n        goods.slice(0, -1).join(', '),\n        goods.slice(-1),\n      ].join(' and ')\n      : goods.join(' and ');\n\n    return start + end;\n  };\n\n  selectGood = (name: string) => {\n    this.setState((prevState) => {\n      const clone = prevState.goodsWithBoolIsSelected.map(e => ({ ...e }));\n      const index = clone.findIndex(e => e.goodName === name);\n\n      clone[index].isSelected = !clone[index].isSelected;\n\n      return ({\n        goodsWithBoolIsSelected: clone,\n      });\n    });\n  };\n\n  clearSelected = () => {\n    this.setState((prevState) => {\n      const clone = prevState.goodsWithBoolIsSelected.map(e => ({ ...e }));\n\n      clone.forEach(good => {\n        good.isSelected = false;\n      });\n\n      return ({\n        goodsWithBoolIsSelected: clone,\n      });\n    });\n  };\n\n  render() {\n    const { goodsWithBoolIsSelected: goods } = this.state;\n\n    const selected = goods.filter(good => good.isSelected).map(e => e.goodName);\n    const headerText = this.getStringDescription(selected);\n\n    return (\n      <div className=\"app\">\n        <h1 className=\"app__selectedGood\">\n          {headerText}\n        </h1>\n        <ul className=\"app__listGoods\">\n          {goods.map(good => (\n            <li\n              key={good.goodName}\n              className={\n                classNames(\n                  'app__listItem',\n                  {\n                    app__listItemSelected: (good.isSelected),\n                  },\n                )\n              }\n            >\n              {good.goodName}\n              <button\n                type=\"button\"\n                onClick={() => this.selectGood(good.goodName)}\n              >\n                {good.isSelected ? 'Remove' : 'Select'}\n              </button>\n            </li>\n          ))}\n        </ul>\n        <button\n          type=\"button\"\n          className={\n            classNames(\n              {\n                invisible: !selected.length,\n              },\n            )\n          }\n          onClick={this.clearSelected}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}